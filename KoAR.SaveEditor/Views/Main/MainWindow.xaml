<Window x:Class="KoAR.SaveEditor.Views.Main.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    xmlns:views="clr-namespace:KoAR.SaveEditor.Views"
    xmlns:local="clr-namespace:KoAR.SaveEditor.Views.Main"
    xmlns:inventory="clr-namespace:KoAR.SaveEditor.Views.Inventory"
    xmlns:stash="clr-namespace:KoAR.SaveEditor.Views.Stash"
    xmlns:constructs="clr-namespace:KoAR.SaveEditor.Constructs" 
    xmlns:s="clr-namespace:System;assembly=mscorlib" 
    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    mc:Ignorable="d" d:DataContext="{d:DesignInstance {x:Type local:MainWindowViewModel}}"
    Width="1366" Height="768" WindowStartupLocation="CenterScreen" 
    Icon="/app.ico" ResizeMode="CanResizeWithGrip">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/KoAR.SaveEditor;component/Templates/DownloadIndicatorTemplate.xaml" />
                <ResourceDictionary Source="/KoAR.SaveEditor;component/Templates/TextBoxErrorTemplate.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <ObjectDataProvider x:Key="ViewModel" ObjectType="{x:Type local:MainWindowViewModel}" />
            <ObjectDataProvider x:Key="Modes" ObjectType="{x:Type s:Enum}" MethodName="GetValues">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="views:Mode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <constructs:IsNullConverter x:Key="IsNullConverter" />
            <local:ManagerViewModelConverter x:Key="ManagerViewModelConverter" />
            <BitmapImage UriSource="/KoAR.SaveEditor;component/Resources/Open.png" x:Key="Open" po:Freeze="True" />
            <BitmapImage UriSource="/KoAR.SaveEditor;component/Resources/Save.png" x:Key="Save" po:Freeze="True" />
            <BitmapImage UriSource="/KoAR.SaveEditor;component/Resources/Help.png" x:Key="Help" po:Freeze="True" />
            <BitmapImage UriSource="/KoAR.SaveEditor;component/Resources/Zoom.png" x:Key="Zoom" po:Freeze="True" />
            <constructs:CompositeConverter x:Key="NotNullToVisibilityConverter">
                <StaticResource ResourceKey="IsNullConverter" />
                <constructs:NegatedBooleanConverter />
                <BooleanToVisibilityConverter />
            </constructs:CompositeConverter>
        </ResourceDictionary>
    </Window.Resources>
    <Window.DataContext>
        <Binding Source="{StaticResource ViewModel}" />
    </Window.DataContext>
    <Window.Style>
        <Style TargetType="{x:Type Window}" BasedOn="{StaticResource {x:Type Window}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding GameSave, Converter={StaticResource IsNullConverter}}" Value="False">
                    <Setter Property="Title" Value="{Binding GameSave.FileName, StringFormat='{}{0} - KoAR Save Editor'}" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding GameSave, Converter={StaticResource IsNullConverter}}" Value="False" />
                        <Condition Binding="{Binding HasUnsavedChanges}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Title" Value="{Binding GameSave.FileName, StringFormat='* {0} - KoAR Save Editor'}" />
                </MultiDataTrigger>
            </Style.Triggers>
            <Setter Property="Title" Value="KoAR Save Editor" />
        </Style>
    </Window.Style>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo x:Name="PART_TaskbarItemInfo" constructs:TaskbarItemInfoOverlay.ContentTemplate="{StaticResource DownloadIndicatorTemplate}"
            constructs:TaskbarItemInfoOverlay.Content="{Binding UpdateService.Update, Source={StaticResource ViewModel}}">
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo Command="Open" ImageSource="{StaticResource Open}" Description="Open File..." DismissWhenClicked="True"
                    CommandTarget="{Binding MainWindow, Source={x:Static Application.Current}}" />
                <ThumbButtonInfo ImageSource="{Binding Overlay, ElementName=PART_TaskbarItemInfo}" Description="Update Available" DismissWhenClicked="True"
                    Command="{Binding OpenUpdateWindowCommand, Source={StaticResource ViewModel}}"
                    Visibility="{Binding UpdateService.Update, Source={StaticResource ViewModel}, Converter={StaticResource NotNullToVisibilityConverter}}"/>
                <ThumbButtonInfo Command="Help" ImageSource="{StaticResource Help}" Description="Help" DismissWhenClicked="True"
                    CommandTarget="{Binding MainWindow, Source={x:Static Application.Current}}" />
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </Window.TaskbarItemInfo>
    <Window.CommandBindings>
        <CommandBinding Command="Help" Executed="Help_Executed" />
        <CommandBinding Command="Open" Executed="Open_Executed" />
        <CommandBinding Command="Save" Executed="Save_Executed" CanExecute="Save_CanExecute" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Gesture="CTRL+O" Command="Open" />
        <KeyBinding Gesture="CTRL+S" Command="Save" />
        <KeyBinding Key="F1" Command="Help" />
    </Window.InputBindings>
    <DockPanel>
        <Border Background="Transparent" DockPanel.Dock="Top">
            <DockPanel Margin="4,1">
                <DockPanel.Resources>
                    <ScaleTransform x:Key="ScaleTransform" ScaleX="0.85" ScaleY="0.85" po:Freeze="True" />
                    <Style TargetType="{x:Type Button}" x:Key="ToolButtonStyle">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border x:Name="BD" BorderBrush="Transparent" Background="Transparent" BorderThickness="1" CornerRadius="2">
                                        <Image Width="18" Source="{TemplateBinding Tag}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" Value="0.25" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="BD" Property="BorderBrush" Value="LightGray" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="RenderTransform" Value="{StaticResource ScaleTransform}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        <Setter Property="Margin" Value="2" />
                        <Setter Property="VerticalAlignment" Value="Center" />
                    </Style>
                </DockPanel.Resources>
                <Button ToolTip="Open File..." Command="Open" Style="{StaticResource ToolButtonStyle}" Tag="{StaticResource Open}" />
                <Button ToolTip="Save" Command="Save" Style="{StaticResource ToolButtonStyle}" Tag="{StaticResource Save}" />
                <ToggleButton x:Name="OpenZoomPopup" FocusVisualStyle="{x:Null}" ToolTip="Zoom" Margin="2" VerticalAlignment="Center">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border x:Name="BD" BorderBrush="Transparent" BorderThickness="1" CornerRadius="2">
                                            <Image Width="18" Source="{StaticResource Zoom}" />
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.25" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="BD" Property="BorderBrush" Value="LightGray" />
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="BD" Property="BorderBrush" Value="LightGray" />
                                                <Setter Property="RenderTransform" Value="{StaticResource ScaleTransform}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <Button>
                    <Button.Resources>
                        <DataTemplate x:Key="LoadingTemplate" DataType="{x:Type s:Boolean}">
                            <constructs:LoadingIndicator Width="18" Height="18" IsLoading="{Binding}" />
                        </DataTemplate>
                    </Button.Resources>
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding UpdateService.Update}" Value="{x:Null}">
                                    <Setter Property="Content" Value="{Binding IsCheckingForUpdate}" />
                                    <Setter Property="ContentTemplate" Value="{StaticResource LoadingTemplate}" />
                                    <Setter Property="Command" Value="{Binding CheckForUpdateCommand}" />
                                    <Setter Property="ToolTip" Value="Check For Update" />
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding UpdateService.Update}" Value="{x:Null}" />
                                        <Condition Binding="{Binding IsCheckingForUpdate}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="ToolTip" Value="Checking For Update..." />
                                </MultiDataTrigger>
                            </Style.Triggers>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border x:Name="BD" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" CornerRadius="2">
                                            <Viewbox Height="18" Width="18" StretchDirection="Both">
                                                <ContentPresenter />
                                            </Viewbox>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="BD" Property="BorderBrush" Value="LightGray" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform ScaleX="0.85" ScaleY="0.85" po:Freeze="True" />
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="Margin" Value="2" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="ContentTemplate" Value="{StaticResource DownloadIndicatorTemplate}" />
                            <Setter Property="Content" Value="True" />
                            <Setter Property="ToolTip" Value="Update Available" />
                            <Setter Property="Command" Value="{Binding OpenUpdateWindowCommand}" />
                        </Style>
                    </Button.Style>
                </Button>
                <Button ToolTip="Help" Command="Help" Style="{StaticResource ToolButtonStyle}"  Tag="{StaticResource Help}" />
                <Popup x:Name="ZoomPopup" PlacementTarget="{Binding ElementName=OpenZoomPopup}" PopupAnimation="Fade" StaysOpen="False" AllowsTransparency="True" 
                    IsOpen="{Binding IsChecked, ElementName=OpenZoomPopup}">
                    <Popup.Resources>
                        <LinearGradientBrush x:Key="Background" EndPoint="0,1" po:Freeze="True">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="#FFFFFF" />
                                <GradientStop Color="#E4E5F0" Offset="1"/>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Popup.Resources>
                    <aero:SystemDropShadowChrome Name="Shdw" Margin="0,0,5,5" Color="#71000000" SnapsToDevicePixels="True" CornerRadius="2">
                        <Border BorderThickness="1" BorderBrush="#767676" Background="{StaticResource Background}" Padding="4,5" CornerRadius="2">
                            <views:ZoomScaler HorizontalAlignment="Right" Grid.Column="3" Width="200" Foreground="#575757"
                                Target="{Binding ElementName=PART_TabControl}" VerticalAlignment="Center" />
                        </Border>
                    </aero:SystemDropShadowChrome>
                </Popup>
                <TextBlock Text="{Binding Source={x:Static views:ApplicationVersion.Current}, StringFormat='v{0}'}" FontSize="10"
                    TextAlignment="Right" VerticalAlignment="Center" FontWeight="Light" Opacity="0.66" Margin="0,0,8,0" />
            </DockPanel>
        </Border>
        <TabControl x:Name="PART_TabControl" ItemsSource="{Binding Source={StaticResource Modes}}" SelectedItem="{Binding Mode}" FocusVisualStyle="{x:Null}" 
            Margin="-1,0,-1,4" TabStripPlacement="Bottom" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" BorderThickness="1"
            constructs:TabContent.Persist="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
            <TabControl.Style>
                <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding GameSave}" Value="{x:Null}">
                            <Setter Property="IsEnabled" Value="False" />
                            <Setter Property="Opacity" Value="0.5" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TabControl.Style>
            <TabControl.ItemTemplate>
                <DataTemplate DataType="{x:Type views:Mode}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock VerticalAlignment="Center" Margin="2">                            
                            <Run Text="{Binding Mode=OneTime}" />
                            <Run>
                                <Run.Tag>
                                    <MultiBinding Converter="{StaticResource ManagerViewModelConverter}">
                                        <Binding Source="{StaticResource ViewModel}" />
                                        <Binding />
                                        <!-- Used to retrigger converter -->
                                        <Binding Path="GameSave" Source="{StaticResource ViewModel}" />
                                    </MultiBinding>
                                </Run.Tag>
                                <Run.Style>
                                    <Style TargetType="{x:Type Run}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource IsNullConverter}}" Value="False">
                                                <Setter Property="Text" Value="{Binding Tag.Items.Count, RelativeSource={RelativeSource Self}, StringFormat='({0})', Mode=OneWay}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Run.Style>
                            </Run>
                        </TextBlock>
                    </StackPanel>
                </DataTemplate>
            </TabControl.ItemTemplate>
            <TabControl.ItemContainerStyle>
                <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
                    <Style.Triggers>
                        <Trigger Property="Tag" Value="{x:Null}">
                            <Setter Property="IsEnabled" Value="False" />
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Tag">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ManagerViewModelConverter}">
                                <Binding Source="{StaticResource ViewModel}" />
                                <Binding Path="Header" RelativeSource="{RelativeSource Self}" />
                                <!-- Used to retrigger converter -->
                                <Binding Path="GameSave" Source="{StaticResource ViewModel}" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.ItemContainerStyle>
            <constructs:TabContent.TemplateSelector>
                <constructs:KeyedDataTemplateSelector>
                    <DataTemplate x:Key="{x:Static views:Mode.Inventory}">
                        <inventory:InventoryManager DataContext="{Binding InventoryManager, Source={StaticResource ViewModel}}" />
                    </DataTemplate>
                    <DataTemplate x:Key="{x:Static views:Mode.Stash}">
                        <stash:StashManager DataContext="{Binding StashManager, Source={StaticResource ViewModel}}" />
                    </DataTemplate>
                </constructs:KeyedDataTemplateSelector>
            </constructs:TabContent.TemplateSelector>
        </TabControl>
    </DockPanel>
</Window>
